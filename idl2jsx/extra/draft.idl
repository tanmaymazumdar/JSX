// http://www.w3.org/TR/animation-timing/

[InterfaceObject]
interface WindowAnimationTiming {
    long requestAnimationFrame(FrameRequestCallback callback);
    void cancelAnimationFrame(long handle);

    // vender's extension
    long webkitRequestAnimationFrame(FrameRequestCallback callback);
    void webkitCancelAnimationFrame(long handle);

    long mozRequestAnimationFrame(FrameRequestCallback callback);
    void mozCancelAnimationFrame(long handle);
};

Window implements WindowAnimationTiming;

callback FrameRequestCallback = void (DOMTimeStamp time);

// http://www.w3.org/TR/url/

interface URL {
};

interface webkitURL : URL {
};

// http://www.w3.org/TR/webaudio/

interface webkitAudioContext : AudioContext {
};

// http://dev.w3.org/geo/api/spec-source-orientation.html
// invalid WebIDL (missing semicolon at the end of interfaces)

[Constructor(DOMString type, optional DeviceOrientationEventInit eventInitDict)]
interface DeviceOrientationEvent : Event {
  readonly attribute double? alpha;
  readonly attribute double? beta;
  readonly attribute double? gamma;
  readonly attribute boolean absolute;
};

dictionary DeviceOrientationEventInit : EventInit {
  double? alpha;
  double? beta;
  double? gamma;
  boolean absolute;
};


[Callback, NoInterfaceObject]
interface DeviceAcceleration {
  readonly attribute double? x;
  readonly attribute double? y;
  readonly attribute double? z;
};

[Callback, NoInterfaceObject]
interface DeviceRotationRate {
  readonly attribute double? alpha;
  readonly attribute double? beta;
  readonly attribute double? gamma;
};

[Constructor(DOMString type, optional DeviceMotionEventInit eventInitDict)]
interface DeviceMotionEvent : Event {
  readonly attribute DeviceAcceleration? acceleration;
  readonly attribute DeviceAcceleration? accelerationIncludingGravity;
  readonly attribute DeviceRotationRate? rotationRate;
  readonly attribute double? interval;
};

dictionary DeviceMotionEventInit : EventInit {
  DeviceAcceleration? acceleration;
  DeviceAcceleration? accelerationIncludingGravity;
  DeviceRotationRate? rotationRate;
  double? interval;
};

